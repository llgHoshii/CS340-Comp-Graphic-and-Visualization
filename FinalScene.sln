#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <cstdlib>
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include "Sphere.h"

#include "shader.h"

#include <iostream>

#include "cylinder.h"
#include "camera.h"

struct GLMesh {
	GLuint vao;
	GLuint vbos[2];
	GLuint nIndices;
};



void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow* window);


// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

// camera
Camera camera(glm::vec3(0.0f, 0.0f, 3.0f));
glm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 3.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

bool firstMouse = true;
bool orthographic = false;
float yaw = -90.0f;	// yaw is initialized to -90.0 degrees since a yaw of 0.0 results in a direction vector pointing to the right so we initially rotate a bit to the left.
float pitch = 0.0f;
float lastX = 800.0f / 2.0;
float lastY = 600.0 / 2.0;
float fov = 45.0f;

// timing
float deltaTime = 0.0f;	// time between current frame and last frame
float lastFrame = 0.0f;

//lighting
glm::vec3 lightPos(1.2f, 1.0f, 2.0f);
glm::vec3 lightColor(0.0f, 1.0f, 0.0f);

int main()
{
	// glfw: initialize and configure
	// ------------------------------
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

	// glfw window creation
	// --------------------
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "3DScene Lansberry", NULL, NULL);
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	glfwSetCursorPosCallback(window, mouse_callback);
	glfwSetScrollCallback(window, scroll_callback);
	


	

	// tell GLFW to capture our mouse
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	// glad: load all OpenGL function pointers
	// ---------------------------------------
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	// configure global opengl state
	// -----------------------------
	glEnable(GL_DEPTH_TEST);

	// build and compile our shader zprogram
	// ------------------------------------
	Shader ourShader("shaderfiles/7.3.camera.vs", "shaderfiles/7.3.camera.fs");

	//adding lighting shader
	Shader lightingShader("shaderfiles/2.2.basic_lighting.vs", "shaderfiles/2.2.basic_lighting.fs");
	Shader lightCubeShader("shaderfiles/6.light_cube.vs", "shaderfiles/6.light_cube.fs");





	// set up vertex data (and buffer(s)) and configure vertex attributes
	// ------------------------------------------------------------------
	float vertices[] = {
		-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
		 0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
		 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
		 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
		-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,

		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
		 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
		 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
		 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
		-0.5f,  0.5f,  0.5f,  0.0f, 1.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

		-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
		-0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
		-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

		 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
		 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
		 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
		 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
		 0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
		 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
		 0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
		 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
		 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

		-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
		 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
		 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
		 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
		-0.5f,  0.5f,  0.5f,  0.0f, 0.0f,
		-0.5f,  0.5f, -0.5f,  0.0f, 1.0f
	};

	float books[] = { //thin out Y and expand X
		-0.8f, -0.2f, -0.7f,  0.0f, 0.0f,
		 0.8f, -0.2f, -0.7f,  1.0f, 0.0f,
		 0.8f,  0.2f, -0.7f,  1.0f, 1.0f, //up
		 0.8f,  0.2f, -0.7f,  1.0f, 1.0f,
		-0.8f,  0.2f, -0.7f,  0.0f, 1.0f,
		-0.8f, -0.2f, -0.7f,  0.0f, 0.0f,

		-0.8f, -0.2f,  0.7f,  0.0f, 0.0f,
		 0.8f, -0.2f,  0.7f,  1.0f, 0.0f,
		 0.8f,  0.2f,  0.7f,  1.0f, 1.0f, //down
		 0.8f,  0.2f,  0.7f,  1.0f, 1.0f,
		-0.8f,  0.2f,  0.7f,  0.0f, 1.0f,
		-0.8f, -0.2f,  0.7f,  0.0f, 0.0f,

		-0.8f,  0.2f,  0.7f,  0.0f, 0.0f,
		-0.8f,  0.2f, -0.7f,  1.0f, 0.0f,
		-0.8f, -0.2f, -0.7f,  1.0f, 1.0f,   //left
		-0.8f, -0.2f, -0.7f,  1.0f, 1.0f,
		-0.8f, -0.2f,  0.7f,  0.0f, 1.0f,
		-0.8f,  0.2f,  0.7f,  0.0f, 0.0f,

		 0.8f,  0.2f,  0.7f,  0.0f, 1.0f,
		 0.8f,  0.2f, -0.7f,  1.0f, 1.0f,
		 0.8f, -0.2f, -0.7f,  1.0f, 0.0f,
		 0.8f, -0.2f, -0.7f,  1.0f, 0.0f,  //right
		 0.8f, -0.2f,  0.7f,  0.0f, 0.0f,
		 0.8f,  0.2f,  0.7f,  0.0f, 1.0f,

		-0.8f, -0.2f, -0.7f,  0.0f, 1.0f,
		 0.8f, -0.2f, -0.7f,  1.0f, 1.0f,
		 0.8f, -0.2f,  0.7f,  1.0f, 0.0f, //bottom
		 0.8f, -0.2f,  0.7f,  1.0f, 0.0f,
		-0.8f, -0.2f,  0.7f,  0.0f, 0.0f,
		-0.8f, -0.2f, -0.7f,  0.0f, 1.0f,

		-0.8f,  0.2f, -0.7f,  0.0f, 1.0f,
		 0.8f,  0.2f, -0.7f,  1.0f, 1.0f,
		 0.8f,  0.2f,  0.7f,  1.0f, 0.0f, //top
		 0.8f,  0.2f,  0.7f,  1.0f, 0.0f,
		-0.8f,  0.2f,  0.7f,  0.0f, 0.0f,
		-0.8f,  0.2f, -0.7f,  0.0f, 1.0f
	};

	//Plane vertex data
	float vertices2[] = {

		-5.0f,  -5.0f, -5.0f,  0.0f, 0.0f,
		 5.0f,  -5.0f, -5.0f,  1.0f, 0.0f, //trianlge one
		 5.0f,  -5.0f,  5.0f,  1.0f, 1.0f,

		 5.0f, -5.0f,  5.0f,  1.0f, 1.0f,
		-5.0f,  -5.0f, 5.0f,  0.0f, 1.0f, //triangle two
		-5.0f,  -5.0f, -5.0f,  0.0f, 0.0f

	};



	//Pyramid vertex data
	float pyramidverts[] = {

		// x      y      z    texture placement

		-0.5f, -0.5f, -0.5f,  0.0f, 0.0f, //back
		 0.5f, -0.5f, -0.5f,  1.0f, 0.0f, 
		 0.0f,  0.5f,  0.0f,  1.0f, 1.0f,

		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f, //front
		 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
		 0.0f,  0.5f,  0.0f,  1.0f, 1.0f,
		 
		-0.5f,  -0.5f,  0.5f,  0.0f, 0.0f, //left
		-0.5f,  -0.5f, -0.5f,  1.0f, 0.0f,
		 0.0f,   0.5f,  0.0f,  1.0f, 1.0f,

		 0.5f,  -0.5f,  0.5f,  0.0f, 0.0f, //right
		 0.5f,  -0.5f, -0.5f,  1.0f, 0.0f,
		 0.0f,   0.5f,  0.0f,  1.0f, 1.0f,
		 
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f, //bot
		 0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
		 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
		 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

	};

	float vitaminverts[] = {

		-3.0f,  -3.0f, -3.0f,  0.0f, 0.0f,
		 3.0f,  -3.0f, -3.0f,  1.0f, 0.0f, //trianlge one
		 3.0f,  -3.0f,  3.0f,  1.0f, 1.0f,

		 3.0f,  -3.0f,  3.0f,  1.0f, 1.0f,
		-3.0f,  -3.0f,  3.0f,  0.0f, 1.0f, //triangle two
		-3.0f,  -3.0f, -3.0f,  0.0f, 0.0f

	};

	float bookCover[] = {

		-0.8f,  0.2f, -0.7f,  0.0f, 0.0f,
		 0.8f,  0.2f, -0.7f,  0.0f, 1.0f,
		 0.8f,  0.2f,  0.7f,  1.0f, 1.0f, 


		 0.8f,  0.2f,  0.7f,  1.0f, 1.0f,
		-0.8f,  0.2f,  0.7f,  1.0f, 0.0f,
		-0.8f,  0.2f, -0.7f,  0.0f, 0.0f

	};

	float bookSpine[] = {

		-0.8f,  0.2f,  0.7f,  0.0f, 0.0f,
		-0.8f,  0.2f, -0.7f,  0.0f, 1.0f,
		-0.8f, -0.2f, -0.7f,  1.0f, 1.0f,

		-0.8f, -0.2f, -0.7f,  1.0f, 1.0f,
		-0.8f, -0.2f,  0.7f,  1.0f, 0.0f,
		-0.8f,  0.2f,  0.7f,  0.0f, 0.0f,
	};


	// positions of the point lights
	glm::vec3 pointLightPositions[] = {
		glm::vec3(0.7f,  0.2f,  -4.5f),
		glm::vec3(6.0f, 0.5f, -4.0f),
		glm::vec3(4.0f,  2.0f, 4.0f),
		glm::vec3(-4.0f,  0.0f, -3.0f)
	};


	unsigned int VBO, VAO;   //original boxes
	unsigned int VBO2, VAO2;
	unsigned int VBO3, VAO3; //copper sphere
	unsigned int VBO4, VAO4; //base cylinder
	unsigned int VBO5, VAO5; //table plane
	unsigned int VBO6, VAO6; //fire pyramid
	unsigned int VBO7, VAO7; //vitamin cylinder
	unsigned int VBO8, VAO8; //vitamin plane
	unsigned int VBO9, VAO9; //vitamin torus
	unsigned int VBO10, VAO10; //book cube
	unsigned int VBO11, VAO11; //book cover
	unsigned int VBO12, VAO12; //book spine


	unsigned int VBOLight, VAOLight;
	unsigned int VBOLight2, VAOLight2;


	unsigned int VBOFireSphere1, VAOFireSphere1;
	unsigned int VBOFireSphere2, VAOFireSphere2;
	unsigned int VBOFireSphere3, VAOFireSphere3;
	unsigned int VBOFireSphere4, VAOFireSphere4;
	unsigned int VBOFireSphere5, VAOFireSphere5;
	unsigned int VBOFireSphere6, VAOFireSphere6;
	unsigned int VBOFireSphere7, VAOFireSphere7;
	unsigned int VBOFireSphere8, VAOFireSphere8;
	unsigned int VBOFireSphere9, VAOFireSphere9;
	unsigned int VBOFireSphere10, VAOFireSphere10;
	unsigned int VBOFireSphere11, VAOFireSphere11;
	unsigned int VBOFireSphere12, VAOFireSphere12;


	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	glBindVertexArray(VAO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);


	glGenVertexArrays(1, &VAO2);
	glGenBuffers(1, &VBO2);
	glBindVertexArray(VAO2);
	glBindBuffer(GL_ARRAY_BUFFER, VBO2);

	glGenVertexArrays(1, &VAO3);
	glGenBuffers(1, &VBO3);
	glBindVertexArray(VAO3);
	glBindBuffer(GL_ARRAY_BUFFER, VBO3);

	glGenVertexArrays(1, &VAO4);
	glGenBuffers(1, &VBO4);
	glBindVertexArray(VAO4);
	glBindBuffer(GL_ARRAY_BUFFER, VBO4);

	glGenVertexArrays(1, &VAO5);
	glGenBuffers(1, &VBO5);
	glBindVertexArray(VAO5);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices2), vertices2, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO6);
	glGenBuffers(1, &VBO6);
	glBindVertexArray(VAO6);
	glBindBuffer(GL_ARRAY_BUFFER, VBO6);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pyramidverts), pyramidverts, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);   
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO7);
	glGenBuffers(1, &VBO7);
	glBindVertexArray(VAO7);
	glBindBuffer(GL_ARRAY_BUFFER, VBO7);

	glGenVertexArrays(1, &VAO8);
	glGenBuffers(1, &VBO8);
	glBindVertexArray(VAO8);
	glBindBuffer(GL_ARRAY_BUFFER, VBO8);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vitaminverts), vitaminverts, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO9);
	glGenBuffers(1, &VBO9);
	glBindVertexArray(VAO9);
	glBindBuffer(GL_ARRAY_BUFFER, VBO9);

	glGenVertexArrays(1, &VAO10);
	glGenBuffers(1, &VBO10);
	glBindVertexArray(VAO10);
	glBindBuffer(GL_ARRAY_BUFFER, VBO10);
	glBufferData(GL_ARRAY_BUFFER, sizeof(books), books, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);


	glGenVertexArrays(1, &VAO11);
	glGenBuffers(1, &VBO11);
	glBindVertexArray(VAO11);
	glBindBuffer(GL_ARRAY_BUFFER, VBO11);
	glBufferData(GL_ARRAY_BUFFER, sizeof(bookCover), bookCover, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO12);
	glGenBuffers(1, &VBO12);
	glBindVertexArray(VAO12);
	glBindBuffer(GL_ARRAY_BUFFER, VBO12);
	glBufferData(GL_ARRAY_BUFFER, sizeof(bookSpine), bookSpine, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	



	glGenVertexArrays(1, &VAOLight);
	glGenBuffers(1, &VBOLight);
	glBindVertexArray(VAOLight);
	glBindBuffer(GL_ARRAY_BUFFER, VBOLight);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);   
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAOLight2);
	glGenBuffers(1, &VBOLight2);
	glBindVertexArray(VAOLight2);
	glBindBuffer(GL_ARRAY_BUFFER, VBOLight2);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);





	glGenVertexArrays(1, &VAOFireSphere1);
	glGenBuffers(1, &VBOFireSphere1);
	glBindVertexArray(VAOFireSphere1);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere1);

	glGenVertexArrays(1, &VAOFireSphere2);
	glGenBuffers(1, &VBOFireSphere2);
	glBindVertexArray(VAOFireSphere2);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere2);

	glGenVertexArrays(1, &VAOFireSphere3);
	glGenBuffers(1, &VBOFireSphere3);
	glBindVertexArray(VAOFireSphere3);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere3);

	glGenVertexArrays(1, &VAOFireSphere4);
	glGenBuffers(1, &VBOFireSphere4);
	glBindVertexArray(VAOFireSphere4);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere4);

	glGenVertexArrays(1, &VAOFireSphere5);
	glGenBuffers(1, &VBOFireSphere5);
	glBindVertexArray(VAOFireSphere5);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere5);

	glGenVertexArrays(1, &VAOFireSphere6);
	glGenBuffers(1, &VBOFireSphere6);
	glBindVertexArray(VAOFireSphere6);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere6);

	glGenVertexArrays(1, &VAOFireSphere7);
	glGenBuffers(1, &VBOFireSphere7);
	glBindVertexArray(VAOFireSphere7);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere7);

	glGenVertexArrays(1, &VAOFireSphere8);
	glGenBuffers(1, &VBOFireSphere8);
	glBindVertexArray(VAOFireSphere8);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere8);

	glGenVertexArrays(1, &VAOFireSphere9);
	glGenBuffers(1, &VBOFireSphere9);
	glBindVertexArray(VAOFireSphere9);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere9);

	glGenVertexArrays(1, &VAOFireSphere10);
	glGenBuffers(1, &VBOFireSphere10);
	glBindVertexArray(VAOFireSphere10);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere10);

	glGenVertexArrays(1, &VAOFireSphere11);
	glGenBuffers(1, &VBOFireSphere11);
	glBindVertexArray(VAOFireSphere11);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere11);

	glGenVertexArrays(1, &VAOFireSphere12);
	glGenBuffers(1, &VBOFireSphere12);
	glBindVertexArray(VAOFireSphere12);
	glBindBuffer(GL_ARRAY_BUFFER, VBOFireSphere12);







	// load and create a texture 
	// -------------------------
	unsigned int texture1, texture2, texture3, texture4, texture5, texture6, texture7, texture8, texture9, texture10, texture11, texture12, texture13, texture14;





	// texture 1
	// ---------
	glGenTextures(1, &texture1);
	glBindTexture(GL_TEXTURE_2D, texture1);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	int width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data = stbi_load("images/wood2.jpg", &width, &height, &nrChannels, 0);
	if (data)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data);





	// texture 2
	// ---------
	glGenTextures(1, &texture2);
	glBindTexture(GL_TEXTURE_2D, texture2);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data = stbi_load("images/pages.png", &width, &height, &nrChannels, 0);
	if (data)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data);








	// texture 3
// ---------
	glGenTextures(1, &texture3);
	glBindTexture(GL_TEXTURE_2D, texture3);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data2 = stbi_load("images/fire.jpg", &width, &height, &nrChannels, 0);
	if (data2)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data2);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data2);









	// texture 4
// ---------
	glGenTextures(1, &texture4);
	glBindTexture(GL_TEXTURE_2D, texture4);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data3 = stbi_load("images/copper.jpg", &width, &height, &nrChannels, 0);
	if (data3)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data3);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data3);










	// texture 5
	// ---------
	glGenTextures(1, &texture5);
	glBindTexture(GL_TEXTURE_2D, texture5);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data2 = stbi_load("images/rubicks.png", &width, &height, &nrChannels, 0);
	if (data2)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data2);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data2);









	// texture 6
// ---------
	glGenTextures(1, &texture6);
	glBindTexture(GL_TEXTURE_2D, texture6);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data4 = stbi_load("images/ash.jpg", &width, &height, &nrChannels, 0);
	if (data4)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);



	// texture 7
// ---------
	glGenTextures(1, &texture7);
	glBindTexture(GL_TEXTURE_2D, texture7);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/book.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);





	// texture 8
// ---------
	glGenTextures(1, &texture8);
	glBindTexture(GL_TEXTURE_2D, texture8);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/bookSpine.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);


	// texture 9
// ---------
	glGenTextures(1, &texture9);
	glBindTexture(GL_TEXTURE_2D, texture9);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/vitaminaC.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);


	// texture 10
// ---------
	glGenTextures(1, &texture10);
	glBindTexture(GL_TEXTURE_2D, texture10);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/white.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);



	// texture 11
// ---------
	glGenTextures(1, &texture11);
	glBindTexture(GL_TEXTURE_2D, texture11);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/fruits.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);




	// texture 12
// ---------
	glGenTextures(1, &texture12);
	glBindTexture(GL_TEXTURE_2D, texture12);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/stones.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);




	// texture 13
// ---------
	glGenTextures(1, &texture13);
	glBindTexture(GL_TEXTURE_2D, texture13);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/fire2.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);



	// texture 14
// ---------
	glGenTextures(1, &texture14);
	glBindTexture(GL_TEXTURE_2D, texture14);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data4 = stbi_load("images/shinyCopper2.png", &width, &height, &nrChannels, 0);
	if (data4)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);


	
	// tell opengl for each sampler to which texture unit it belongs to (only has to be done once)
	// -------------------------------------------------------------------------------------------
	ourShader.use();
	ourShader.setInt("texture1", 0);
	ourShader.setInt("texture2", 1);
	ourShader.setInt("texture3", 2);
	ourShader.setInt("texture4", 3);
	ourShader.setInt("texture5", 4);
	ourShader.setInt("texture6", 5);
	ourShader.setInt("texture7", 6);
	ourShader.setInt("texture8", 7);
	ourShader.setInt("texture9", 8);
	ourShader.setInt("texture9", 9);
	ourShader.setInt("texture9", 10);
	ourShader.setInt("texture9", 11);
	ourShader.setInt("texture9", 12);
	ourShader.setInt("texture9", 13);
	ourShader.setInt("texture9", 14);



	glm::mat4 model;
	float angle;

	// render loop
	// -----------
	while (!glfwWindowShouldClose(window))
	{
		// per-frame time logic
		// --------------------
		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		// input
		// -----
		processInput(window);

		// render
		// ------
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


		// activate shader

		ourShader.use();
		ourShader.setVec3("objectColor", 1.0f, 0.5f, 0.31f);
		ourShader.setVec3("lightColor", 1.0f, 1.0f, 1.0f);
		ourShader.setVec3("lightPos", lightPos);
		ourShader.setVec3("objectColor", camera.Position);


		ourShader.setVec3("viewPos", camera.Position);
		ourShader.setFloat("material.shininess", 32.0f);
		ourShader.setVec3("lightColor", 0.0f, 1.0f, 0.0f);


		// directional light
		ourShader.setVec3("dirLight.direction", -0.2f, -1.0f, -0.3f);
		ourShader.setVec3("dirLight.ambient", 0.05f, 0.05f, 0.05f);
		ourShader.setVec3("dirLight.diffuse", 0.4f, 0.4f, 0.4f);
		ourShader.setVec3("dirLight.specular", 0.5f, 0.5f, 0.5f);
		// point light 1
		ourShader.setVec3("pointLights[0].position", pointLightPositions[0]);
		ourShader.setVec3("pointLights[0].ambient", 0.05f, 0.05f, 0.05f);
		ourShader.setVec3("pointLights[0].diffuse", 0.8f, 0.8f, 0.8f);
		ourShader.setVec3("pointLights[0].specular", 1.0f, 1.0f, 1.0f);
		ourShader.setFloat("pointLights[0].constant", 1.0f);
		ourShader.setFloat("pointLights[0].linear", 0.09);
		ourShader.setFloat("pointLights[0].quadratic", 0.032);
		// point light 2
		ourShader.setVec3("pointLights[1].position", pointLightPositions[1]);
		ourShader.setVec3("pointLights[1].ambient", 0.05f, 0.05f, 0.05f);
		ourShader.setVec3("pointLights[1].diffuse", 0.8f, 0.8f, 0.8f);
		ourShader.setVec3("pointLights[1].specular", 1.0f, 1.0f, 1.0f);
		ourShader.setFloat("pointLights[1].constant", 1.0f);
		ourShader.setFloat("pointLights[1].linear", 0.09);
		ourShader.setFloat("pointLights[1].quadratic", 0.032);
		// point light 3
		ourShader.setVec3("pointLights[2].position", pointLightPositions[2]);
		ourShader.setVec3("pointLights[2].ambient", 0.05f, 0.05f, 0.05f);
		ourShader.setVec3("pointLights[2].diffuse", 0.8f, 0.8f, 0.8f);
		ourShader.setVec3("pointLights[2].specular", 1.0f, 1.0f, 1.0f);
		ourShader.setFloat("pointLights[2].constant", 1.0f);
		ourShader.setFloat("pointLights[2].linear", 0.09);
		ourShader.setFloat("pointLights[2].quadratic", 0.032);
		// point light 4
		ourShader.setVec3("pointLights[3].position", pointLightPositions[3]);
		ourShader.setVec3("pointLights[3].ambient", 0.05f, 0.05f, 0.05f);
		ourShader.setVec3("pointLights[3].diffuse", 0.8f, 0.8f, 0.8f);
		ourShader.setVec3("pointLights[3].specular", 1.0f, 1.0f, 1.0f);
		ourShader.setFloat("pointLights[3].constant", 1.0f);
		ourShader.setFloat("pointLights[3].linear", 0.09);
		ourShader.setFloat("pointLights[3].quadratic", 0.032);
		// spotLight
		ourShader.setVec3("spotLight.position", camera.Position);
		ourShader.setVec3("spotLight.direction", camera.Front);
		ourShader.setVec3("spotLight.ambient", 0.0f, 0.0f, 0.0f);
		ourShader.setVec3("spotLight.diffuse", 1.0f, 1.0f, 1.0f);
		ourShader.setVec3("spotLight.specular", 1.0f, 1.0f, 1.0f);
		ourShader.setFloat("spotLight.constant", 1.0f);
		ourShader.setFloat("spotLight.linear", 0.09);
		ourShader.setFloat("spotLight.quadratic", 0.032);
		ourShader.setFloat("spotLight.cutOff", glm::cos(glm::radians(12.5f)));
		ourShader.setFloat("spotLight.outerCutOff", glm::cos(glm::radians(15.0f)));


		ourShader.use();

		//setting up ortho view
		glm::mat4 projection;
		if (orthographic) {
			float scale = 100;
			projection = glm::ortho(-((float)SCR_WIDTH / scale), ((float)SCR_WIDTH / scale), -((float)SCR_HEIGHT / scale), ((float)SCR_HEIGHT / scale), -20.0f, 20.0f);	
		}
		else {
			projection = glm::perspective(glm::radians(fov), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
		}
		ourShader.setMat4("projection", projection);



		// camera/view transformation
		glm::mat4 view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
		ourShader.setMat4("view", view);


		//rubicks cube
		ourShader.use();
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture5);
		glBindVertexArray(VAO);
		model = glm::mat4(1.0f);	
		model = glm::translate(model, glm::vec3(5.0f, -0.2f, 1.0f));
		angle = 0.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);


		//Copper Sphere
		glActiveTexture(GL_TEXTURE0);            //first non translucent texture
		glBindTexture(GL_TEXTURE_2D, texture14);
		//glActiveTexture(GL_TEXTURE1);            //second translucent texture
		//glBindTexture(GL_TEXTURE_2D, texture5);
		glBindVertexArray(VAO3);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first		
		model = glm::translate(model, glm::vec3(-1.0f, 0.5f, -1.0f));
		ourShader.setMat4("model", model);
		Sphere S(1, 10, 20);
		S.Draw();


		//Base Cylinder
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture6);
		glBindVertexArray(VAO4);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first		
		model = glm::translate(model, glm::vec3(-1.0f, 0.0f, -1.0f));
		ourShader.setMat4("model", model);
		static_meshes_3D::Cylinder C2(0.75, 10, 1.25, true, true, true);
		C2.render();


		//Plane
		ourShader.use();
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture1);
		glBindVertexArray(VAO5);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first		
		model = glm::translate(model, glm::vec3(2.0f,4.2f, 0.0f)); //positioning is useful to move things in corners or certain areas of the scene
		angle = 0.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 6);



		//vitamin cylinder
		ourShader.use();
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture9);
		glBindVertexArray(VAO4);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first		
		model = glm::translate(model, glm::vec3(-2.0f, 0.0f, 1.5f));
		ourShader.setMat4("model", model);
		static_meshes_3D::Cylinder C3(0.3, 10, 1.7, true, true, true);
		C3.render();


		//vitamin plane
		ourShader.use();
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture11);
		glBindVertexArray(VAO8);
		model = glm::mat4(1.0f);	
		model = glm::translate(model, glm::vec3(-2.0f, 0.7f, 1.5f));
		angle = 180.0f;
		model = glm::scale(model, glm::vec3(0.07f));
		model = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.0f, 0.0f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 6);


		//vitamin torus
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture10);
		glBindVertexArray(VAO9);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first		
		model = glm::translate(model, glm::vec3(-2.0f, 0.8f, 1.5f));
		ourShader.setMat4("model", model);
		static_meshes_3D::Cylinder C4(0.4, 10, 0.2, true, true, true);
		C4.render();


		//lower book
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture2);
		glBindVertexArray(VAO10);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(4.5f, -0.5f, -3.0f));
		angle = 220.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(0.0f, 10.0f, 0.0f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);


		//upper book
		glBindVertexArray(VAO10);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(4.5f, -0.1f, -3.0f));
		angle = 56.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(0.0f, 10.0f, 0.0f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);


		//book cover
		ourShader.use();
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture7);
		glBindVertexArray(VAO11);
		model = glm::mat4(1.0f);	
		model = glm::translate(model, glm::vec3(4.5f, -0.09f, -3.0f));
		angle = 56.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(0.0f, 10.0f, 0.0f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 6);



		//book cover2
		ourShader.use();
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture7);
		glBindVertexArray(VAO11);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(4.48f, -0.495f, -3.0f));
		angle = 220.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(0.0f, 10.0f, 0.0f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 6);


		//book spine
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture8);
		glBindVertexArray(VAO12);
		model = glm::mat4(1.0f); 
		model = glm::translate(model, glm::vec3(4.6f, -0.1f, -3.0f));
		angle = 325.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(0.0f, 10.0f, 0.0f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 6);



		//pyramid with fire texture
		ourShader.use();
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture13);
		glBindVertexArray(VAO6);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
		model = glm::translate(model, glm::vec3(1.5f, -0.2f, 1.0f));
		angle = 0.0f;
		model = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));
		ourShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 18);



		//campfire stones

		//right side stones

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere1);
		model = glm::mat4(1.0f); 	
		model = glm::translate(model, glm::vec3(2.0f, -0.7f, 0.4f)); //move 2 or 2.3 in x and 0.4 in z
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S2(1, 10, 20);
		S2.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere2);
		model = glm::mat4(1.0f); 	
		model = glm::translate(model, glm::vec3(2.2f, -0.7f, 0.8f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S3(1, 10, 20);
		S3.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere3);
		model = glm::mat4(1.0f); 		
		model = glm::translate(model, glm::vec3(2.2f, -0.7f, 1.2f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S4(1, 10, 20);
		S4.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere4);
		model = glm::mat4(1.0f); 	
		model = glm::translate(model, glm::vec3(2.0f, -0.7f, 1.6f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S5(1, 10, 20);
		S5.Draw();
		
		//front stones

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere5);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(1.6f, -0.7f, 1.7f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S6(1, 10, 20);
		S6.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere6);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(1.2f, -0.7f, 1.7f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S7(1, 10, 20);
		S7.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere7);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(0.9f, -0.7f, 1.5f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S8(1, 10, 20);
		S8.Draw();

		//left side

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere8);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(0.8f, -0.7f, 1.2f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S9(1, 10, 20);
		S9.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere9);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(0.8f, -0.7f, 0.8f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S10(1, 10, 20);
		S10.Draw();

		//back stones

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere10);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(0.9f, -0.7f, 0.4f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S11(1, 10, 20);
		S11.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere11);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(1.3f, -0.7f, 0.3f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S12(1, 10, 20);
		S12.Draw();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture12);
		glBindVertexArray(VAOFireSphere12);
		model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(1.7f, -0.7f, 0.3f));
		model = glm::scale(model, glm::vec3(0.2f));
		ourShader.setMat4("model", model);
		Sphere S13(1, 10, 20);
		S13.Draw();



		//light sources
		
		//source 1
		lightCubeShader.use();
		glBindVertexArray(VAOLight);
		lightCubeShader.setMat4("projection", projection);
		lightCubeShader.setMat4("view", view);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
		model = glm::translate(model, glm::vec3(1.0f, 1.0f, 5.0f));
		model = glm::scale(model, glm::vec3(0.2f));//small cube
		lightCubeShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		//source 2
		lightCubeShader.use();
		glBindVertexArray(VAOLight2);
		lightCubeShader.setMat4("projection", projection);
		lightCubeShader.setMat4("view", view);
		model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
		model = glm::translate(model, glm::vec3(-2.5f, 1.0f,3.0f));
		model = glm::scale(model, glm::vec3(0.2f));//small cube
		lightCubeShader.setMat4("model", model);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		//multiple sources
		lightCubeShader.use();
		lightCubeShader.setMat4("projection", projection);
		lightCubeShader.setMat4("view", view);
		glBindVertexArray(VAOLight);
		for (unsigned int i = 0; i < 4; i++)
		{
			model = glm::mat4(1.0f);
			model = glm::translate(model, pointLightPositions[i]);
			model = glm::scale(model, glm::vec3(0.2f));
			lightCubeShader.setMat4("model", model);
			glDrawArrays(GL_TRIANGLES, 0, 36);
		}


		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		// -------------------------------------------------------------------------------
		glfwSwapBuffers(window);
		glfwPollEvents();


	}

	// optional: de-allocate all resources once they've outlived their purpose:
	// ------------------------------------------------------------------------
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);

	glDeleteVertexArrays(1, &VAO2);
	glDeleteBuffers(1, &VBO2);

	glDeleteVertexArrays(1, &VAO3);
	glDeleteBuffers(1, &VBO3);

	glDeleteVertexArrays(1, &VAO4);
	glDeleteBuffers(1, &VBO4);

	glDeleteVertexArrays(1, &VAO5);
	glDeleteBuffers(1, &VBO5);

	glDeleteVertexArrays(1, &VAO6);
	glDeleteBuffers(1, &VBO6);

	// glfw: terminate, clearing all previously allocated GLFW resources.
	// ------------------------------------------------------------------
	glfwTerminate();
	return 0;
}



// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
	float cameraSpeed = 2.5 * deltaTime;
	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		cameraPos += cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		cameraPos -= cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	//adding camera up and down with Q and E
	if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)
		cameraPos += cameraSpeed * cameraUp;
	if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)
		cameraPos -= cameraSpeed * cameraUp;
	//adding orthographic and perspective P hotkey
	if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS)
	{
		orthographic = !orthographic;
		glfwWaitEventsTimeout(3);   //incorporated glfwWaitEventsTimeout to avoid the scene changing perspectives rapidly
	}
}


// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	// make sure the viewport matches the new window dimensions; note that width and 
	// height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}


// glfw: whenever the mouse moves, this callback is called
// -------------------------------------------------------
void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos; // reversed since y-coordinates go from bottom to top
	lastX = xpos;
	lastY = ypos;

	float sensitivity = 0.1f; // change this value to your liking
	xoffset *= sensitivity;
	yoffset *= sensitivity;

	yaw += xoffset;
	pitch += yoffset;

	// make sure that when pitch is out of bounds, screen doesn't get flipped
	if (pitch > 89.0f)
		pitch = 89.0f;
	if (pitch < -89.0f)
		pitch = -89.0f;

	glm::vec3 front;
	front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	front.y = sin(glm::radians(pitch));
	front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
	cameraFront = glm::normalize(front);
}


// glfw: whenever the mouse scroll wheel scrolls, this callback is called
// ----------------------------------------------------------------------
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	fov -= (float)yoffset;
	if (fov < 1.0f)
		fov = 1.0f;
	if (fov > 45.0f)
		fov = 45.0f;
}

